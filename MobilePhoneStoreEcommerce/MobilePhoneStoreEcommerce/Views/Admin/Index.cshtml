@using MobilePhoneStoreEcommerce.Persistence.Consts
@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Admin</title>

    <link rel="stylesheet" type="text/css" href="~/Content/bootstrap.min.css" />
    <link rel="stylesheet" type="text/css" href="~/Content/DataTables/css/dataTables.bootstrap.css" />
    <link href="https://cdn.jsdelivr.net/npm/jquery-smarttab@3/dist/css/smart_tab_all.min.css" rel="stylesheet" type="text/css" />
    <link rel="stylesheet" type="text/css" href="~/Content/Admin.css" />

</head>
<body>
    <header class="header">
        <div class="navbar navbar-default">
            <div class="container">
                <div class="navbar-header">
                    @Html.ActionLink("Home", "Index", "HomeScreen", new { area = "" }, new { @class = "navbar-brand" })
                    @Html.ActionLink("Admin", "Index", "Admin", null, new { @class = "navbar-brand" })
                </div>
                <div class="navbar-collapse collapse">
                    <div class="nav navbar-nav navbar-right">
                        <img src="~/Content/resources/images/adminIcon.png" style="height: 50px;" />
                        <ul class="nav navbar-nav navbar-right">
                            <li>@Html.ActionLink("Log out", "Logout", "Account", routeValues: new { sessionName = SessionNames.AdminID }, htmlAttributes: new { id = "logoutLink" })</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <div>
        <div id="smarttab">
            <ul class="nav">
                <li>
                    <a class="nav-link" href="#tab-ProducerManagement">
                        Producer Management
                    </a>
                </li>
                <li>
                    <a class="nav-link" href="#tab-CategoryManagement">
                        Category Management
                    </a>
                </li>
                <li>
                    <a class="nav-link" href="#tab-ProductSpecificationManagement">
                        Product Specification Management
                    </a>
                </li>
            </ul>
            <div class="tab-content">
                <div id="tab-ProducerManagement" class="tab-pane" role="tabpanel">
                    <div>
                        <button id="addNewProducer" class="btn btn-primary">New Producer</button>
                    </div>
                    <div>
                        <table id="producers" class="table	table-bordered	table-hover ">
                            <thead>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>

                    <div id="dialogProducer" class="form-group table-bordered" style="display:none;">
                        <form id="formProducer" role="form">
                            <div class="form-group">
                                <label for="name">Name:</label>
                                <input id="producer-name" class="form-control" name="name" type="text" placeholder="Enter name">
                            </div>
                        </form>
                    </div>
                </div>
                <div id="tab-CategoryManagement" class="tab-pane" role="tabpanel">
                    <div>
                        <button id="addNewCateg" class="btn btn-primary">New Category</button>
                    </div>
                    <div>
                        <table id="categories" class="table	table-bordered	table-hover ">
                            <thead>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>

                    <div id="dialogCategory" class="form-group table-bordered" style="display:none;">
                        <form id="formCategory" role="form">
                            <div class="form-group">
                                <label for="name">Name:</label>
                                <input id="categorys-name" class="form-control" name="name" type="text" placeholder="Enter name">
                            </div>
                        </form>
                    </div>
                </div>
                <div id="tab-ProductSpecificationManagement" class="tab-pane" role="tabpanel">
                    <div>
                        <button id="add-new-specification" class="btn btn-primary">New Specification</button>
                    </div>
                    <div>
                        <table id="specifications" class="table	table-bordered	table-hover ">
                            <thead>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>

                    <div id="dialog-specification" style="display:none;">
                        <form id="form-specification" role="form">
                            <div class="form-group">
                                <label for="name">Name:</label>
                                <input id="specification-name" class="form-control" name="name" type="text" placeholder="Enter name" required="required">
                            </div>
                            <div class="form-group">
                                <label for="description">Description:</label>
                                <input id="specification-decription" class="form-control" name="description" type="text" placeholder="Enter name">
                            </div>
                        </form>
                    </div>

                    <div id="values-of-specification" style="display:none;">
                        <table class="table table-bordered table-hover">
                            <thead>
                                <tr>
                                    <td>Value</td>
                                    <td>Delete</td>
                                </tr>
                            </thead>
                            <tbody id="values-of-specification-body">
                            </tbody>
                        </table>

                        <div class="form-group">
                            <input type="text" class="value-to-add" placeholder="Enter value" />
                            <button class="add-new-value btn btn-primary data-specificationID">Add</button>
                        </div>

                        <button class="btn btn-default back">Back</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="~/Scripts/jquery-3.4.1.js"></script>
    <script src="~/Scripts/bootstrap.js"></script>
    <script src="~/Scripts/bootbox.js"></script>
    <script src="~/Scripts/DataTables/jquery.dataTables.js"></script>
    <script src="~/Scripts/DataTables/dataTables.bootstrap.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery-smarttab@3/dist/js/jquery.smartTab.min.js" type="text/javascript"></script>
    <script src="~/Scripts/jquery-ui.js"></script>
    <script src="~/Scripts/DataTables/dataTables.scroller.js"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.11.1/jquery.validate.min.js"></script>

    <script>
        $(document).ready(function () {
            //dataTable
            var tableProducer = $("#producers").DataTable({
                ajax: {
                    url: "/api/Producers/GetAll",
                    dataSrc: "",
                },
                columns: [
                    {
                        title: "Producer's ID",
                        data: "producerID",
                        render: function (data) {
                            return data;
                        }
                    },
                    {
                        title: "Producer's Name",
                        data: "name",
                        render: function (data, type, producer) {
                            return "<button class='btn-link jsModify' data-producerID=" + producer.producerID + ">" + data + "</button>";
                        }
                    },
                    {
                        title: "",
                        data: "producerID",
                        render: function (data) {
                            return "<button class='jsDelete' data-producerID= " + data + ">Delete</button>";
                        }
                    },
                ],
                //paging: false,
                scrollY: 280,
                scrollX: false,
                scroller: true,
                deferRender: true,
            });

            var tableCategory = $("#categories").DataTable({
                ajax: {
                    url: "/api/Categories/GetAll",
                    dataSrc: "",
                },
                columns: [
                    {
                        title: "Category's ID",
                        data: "categoryID",
                        render: function (data) {
                            return data;
                        }
                    },
                    {
                        title: "Category's Name",
                        data: "name",
                        render: function (data, type, category) {
                            return "<button class='btn-link jsModify' data-categoryID=" + category.categoryID + ">" + data + "</button>";
                        }
                    },
                    {
                        title: "",
                        data: "categoryID",
                        render: function (data) {
                            return "<button class='jsDelete' data-categoryID= " + data + ">Delete</button>";
                        }
                    },
                ],
                scrollY: 280,
                scrollX: false,
                scroller: true,
                deferRender: true,
            });

            var tableSpecification = $("#specifications").DataTable({
                ajax: {
                    url: "/api/Specifications/GetAll",
                    dataSrc: "",
                },
                columns: [
                    {
                        title: "Specification's Id",
                        data: "specificationID",
                        render: function (data) {
                            return data;
                        }
                    },
                    {
                        title: "Specification's Name",
                        data: "name",
                        render: function (data, type, specification) {
                            return "<button class='btn-link jsModify' data-specificationID=" + specification.specificationID + ">" + data + "</button>";
                        }
                    },
                    {
                        title: "Description",
                        data: "description",
                        render: function (data, type, specification) {
                            return data;
                        }
                    },
                    {
                        title: "",
                        data: "specificationID",
                        render: function (data) {
                            return "<button class='jsDelete' data-specificationID= " + data + ">Delete</button>";
                        }
                    },
                    {
                        title: "",
                        data: "specificationID",
                        render: function (data) {
                            return "<button class='btn-link jsValues' data-specificationID=" + data + ">Values</button>";
                        }
                    }
                ],
                scrollY: 280,
                scrollX: false,
                scroller: true,
                deferRender: true,
            });


            //smartTab
            var smartTab = $("#smarttab").smartTab();
            smartTab.smartTab("goToTab", 0);
            

            //when switch to a new tab --> reload a data table inside it
            smartTab.on("tabContent", function (e, anchorObject, tabIndex) {
                if (tabIndex == 0) {
                    tableProducer.ajax.url("/api/Producers/GetAll").load();
                }

                if (tabIndex == 1) {
                    tableCategory.ajax.url("/api/Categories/GetAll").load();
                }

                if (tabIndex == 2) {
                    tableSpecification.ajax.url("/api/Specifications/GetAll").load();
                }
            });

            ////////////////Producer management event handlers////
            $("#producers tbody").on("click", "tr", function () {
                if ($(this).hasClass("selected")) {
                    $(this).removeClass("selected");
                }
                else {
                    tableProducer.$("tr.selected").removeClass("selected");
                    $(this).addClass("selected");
                }
            });
            //open producer dialog to create a new producer
            $("#addNewProducer").on("click", function () {
                CreateNewProducerDialogBootBox("Adding a new producer", tableProducer, "add", null);
            });
            //open producer dialog to modify a exist producer
            $("#producers").on("click", ".jsModify", function () {
                var button = $(this);
                var title = "modify producer: " + button.attr("data-producerID") + ". " + button.text();
                CreateNewProducerDialogBootBox(title, tableProducer, "modify", button.attr("data-producerID"));
            });

            //delete a specific row in dataTable
            $("#producers").on("click", ".jsDelete", function () {
                var button = $(this);

                $.ajax({
                    url: "/api/Producers/Get?id=" + button.attr("data-producerID"),
                    method: "Get",
                    success: function (response) {
                        if (response.isHavingProduct) {
                            bootbox.alert("You can not delete this producer, because some products base on it.")
                        } else {
                            bootbox.confirm("Are you sure you want to delete producer " + button.attr("data-producerID"), function (result) {
                                if (result) {
                                    $.ajax({
                                        url: "/api/Producers/Delete?id=" + button.attr("data-producerID"),
                                        method: "Delete",
                                        success: function () {
                                            tableProducer.row(button.parents("tr")).remove().draw();
                                        }
                                    });
                                }
                            });
                        }
                    },
                });
            });

            ///////////////Category management event handlers//////
            //click a single row --> change back-ground color
            $("#categories tbody").on("click", "tr", function () {
                if ($(this).hasClass('selected')) {
                    $(this).removeClass('selected');
                }
                else {
                    tableCategory.$('tr.selected').removeClass('selected');
                    $(this).addClass('selected');
                }
            });

            //open category dialog for adding a new category
            $("#addNewCateg").on("click", function () {

                CreateNewCategoryDialogBootBox("Adding a new category", tableCategory, "add", null);
                //$(".dialogCategory-bootbox-ok-button").attr("mode", "add");
            });

            //open category dialog for modify an exist category
            $("#categories").on("click", ".jsModify", function () {
                var button = $(this);

                CreateNewCategoryDialogBootBox("modify category " + button.attr("data-categoryID") + ". " + button.text(), tableCategory, "modify", button.attr("data-categoryID"));
                //$(".dialogCategory-bootbox-ok-button").attr("mode", "modify");
            });

            //delete a specific row in dataTable
            $("#categories").on("click", ".jsDelete", function () {
                var button1 = $(this);

                $.ajax({
                    url: "/api/Categories/Get?id=" + button1.attr("data-categoryID"),
                    method: "Get",
                    success: function (response) {
                        if (response.isHavingProduct) {
                            bootbox.alert("You can not delete this category, because some products base on it.");
                        } else {
                            bootbox.confirm("Are you sure you want to delete category " + button1.attr("data-categoryID"), function (result) {
                                if (result) {
                                    $.ajax({
                                        url: "/api/Categories/Delete?id=" + button1.attr("data-categoryID"),
                                        method: "Delete",
                                        success: function () {
                                            tableCategory.row(button1.parents("tr")).remove().draw();
                                        }
                                    });
                                }
                            });
                        }
                    }
                });
            });

            ///////////////Product specifications management event handlers//////
            $("#specifications tbody").on("click", "tr", function () {
                if ($(this).hasClass("selected")) {
                    $(this).removeClass("selected");
                }
                else {
                    tableSpecification.$("tr.selected").removeClass("selected");
                    $(this).addClass("selected");
                }
            });
            //open producer dialog to create a new producer
            $("#add-new-specification").on("click", function () {
                CreateNewSpecificationDialogBootBox("Adding a new specification", tableSpecification, "add", null);
            });
            //open producer dialog to modify a exist producer
            $("#specifications").on("click", ".jsModify", function () {
                var button = $(this);
                var title = "modify specification: " + button.attr("data-specificationID") + ". " + button.text();
                CreateNewSpecificationDialogBootBox(title, tableSpecification, "modify", button.attr("data-specificationID"));
            });

            //delete a specific row in dataTable
            $("#specifications").on("click", ".jsDelete", function () {
                var button = $(this);

                $.ajax({
                    url: "/api/Specifications/Get?id=" + button.attr("data-specificationID"),
                    method: "Get",
                    success: function (response) {
                        if (response.isHavingProduct) {
                            bootbox.alert("You can not delete this specification, because some products base on it");
                        } else {
                            bootbox.confirm("Are you sure you want to delete specification " + button.attr("data-specificationID"), function (result) {
                                if (result) {
                                    $.ajax({
                                        url: "/api/Specifications/Delete?id=" + button.attr("data-specificationID"),
                                        method: "Delete",
                                        success: function () {
                                            tableSpecification.row(button.parents("tr")).remove().draw();
                                        }
                                    });
                                }
                            });
                        }
                    }
                });
            });

            $("#specifications").on("click", ".jsValues", function () {
                var button = $(this);
                $.ajax({
                    url: "/api/Specifications/Get?id=" + button.attr("data-specificationID"),
                    method: "Get",
                    success: function (data) {
                        $(".add-new-value").attr("data-specificationID", data.specificationID);

                        $("#values-of-specification-body").empty();

                        for (var i = 0; i < data.values.length; i++) {
                            $("#values-of-specification-body").append("<tr><td>" + data.values[i].value + "</td>"
                                + "<td>" + "<button class='btn-link jsDeleteValue'" + "data-value='" + data.values[i].value + "' data-specificationID='" + data.specificationID + "'>Delete"
                                + "</button></td></tr>");
                        }

                        $("#values-of-specification").dialog();
                    },
                });

            });

            $("#values-of-specification").on("click", ".back", function () {
                $("#values-of-specification .value-to-add").val("");
                $("#values-of-specification").dialog("destroy");
            });

            $("#values-of-specification").on("click", ".jsDeleteValue", function () {
                button = $(this);

                $.ajax({
                    url: "/api/SpecificationValues/Get?specificationID=" + button.attr("data-specificationID") + "&value=" + button.attr("data-value"),
                    method: "Get",
                    success: function (response) {
                        if (response.isHavingProduct) {
                            bootbox.alert("You can not delete this value, because some products base on it.");
                        } else {
                            $.ajax({
                                url: "/api/SpecificationValues/Delete",
                                method: "Delete",
                                data: {
                                    specificationID: button.attr("data-specificationID"),
                                    value: button.attr("data-value"),
                                },
                                success: function () {
                                    button.parents("tr").remove();
                                },
                            });
                        }
                    },
                });
            });

            $("#values-of-specification").on("click", ".add-new-value", function () {
                var button = $(this);
                $.ajax({
                    url: "/api/SpecificationValues/Get?specificationID=" + button.attr("data-specificationID") + "&value=" + $(".value-to-add").val(),
                    method: "Get",
                    success: function (data) {
                        var strValue = $(".value-to-add").val().toString();
                        if (data == null && strValue.trim() != "" && strValue.length < 50) {
                            $.ajax({
                                url: "/api/SpecificationValues/Create",
                                method: "Post",
                                data: {
                                    specificationID: button.attr("data-specificationID"),
                                    value: $(".value-to-add").val(),
                                },
                                success: function (data) {
                                    $("#values-of-specification-body").append("<tr><td>" + data.value + "</td>"
                                        + "<td>" + "<button class='btn-link jsDeleteValue'" + "data-value='" + data.value + "' data-specificationID='" + data.specificationID + "'>Delete"
                                        + "</button></td></tr>");
                                },
                            });
                        } else if (strValue.trim() == "") {
                            alert("Value is required !!!");
                        } else if (strValue.length >= 50) {
                            alert("Value is too long !!! (max is 50 characters)");
                        } else {
                            alert("This specification alrealy has this value, please try another one");
                        }
                    },
                });

            });

            //test aria
        });

        /////

        jQuery.fn.serializeJSON = function () {
            var json = {};

            jQuery.map(jQuery(this).serializeArray(), function (n) {
                var _ = n.name.indexOf('[');

                if (_ > -1) {
                    var o = json,
                        _name;

                    _name = n.name.replace(/\]/gi, '').split('[');

                    for (var i = 0, len = _name.length; i < len; i++) {
                        if (i == len - 1) {
                            if (o[_name[i]]) {
                                if (typeof o[_name[i]] == 'string') {
                                    o[_name[i]] = [o[_name[i]]];
                                }

                                o[_name[i]].push(n.value);
                            } else {
                                o[_name[i]] = n.value || '';
                            }
                        } else {
                            o = o[_name[i]] = o[_name[i]] || {};
                        }
                    }
                } else if (json[n.name] !== undefined) {
                    if (!json[n.name].push) {
                        json[n.name] = [json[n.name]];
                    }

                    json[n.name].push(n.value || '');
                } else {
                    json[n.name] = n.value || '';
                }
            });

            return json;
        };


        ////
        function CreateNewProducerDialogBootBox(title, table, mode, producerID) {
            //to render a bootbox dialog create new or modify exist producer within a specific DataTable

            var dialogProducer = bootbox.dialog({
                message: $("#dialogProducer").html(),
                title: title,
                buttons: [
                    {
                        label: "Save",
                        className: "btn btn-primary pull-left",
                        callback: function () {
                            var form = dialogProducer.find("#formProducer");
                            var items = form.serializeJSON();

                            form.validate({
                                rules: {
                                    name: {
                                        required: true,
                                        checkUniqueNameOfProducer: true,
                                        maxlength: 50,
                                    },
                                },
                                messages: {
                                    name: {
                                        required: "Name is required !!!",
                                    }
                                },
                            });

                            if (form.valid() == false)
                                return false;

                            if (mode === "add") {
                                $.ajax({
                                    url: "/api/Producers/Create",
                                    method: "Post",
                                    data: {
                                        name: items.name,
                                    },
                                    success: function (response) {
                                        var trDOM = table.row.add({
                                            producerID: response.producerID,
                                            name: response.name,
                                        }).draw(false).node();

                                        $(trDOM).addClass("selected");

                                        $(trDOM).attr("id", "added");
                                        var row = table.row("#added");
                                        row.scrollTo();

                                        //scroll the screen
                                        var $rowToScroll = $(trDOM);
                                        $('html, body').animate({ scrollTop: $rowToScroll.offset().top }, 2000);

                                        $(trDOM).removeAttr("id");
                                    },
                                });
                            }
                            else if (mode === "modify") {
                                $.ajax({
                                    url: "/api/Producers/Update",
                                    method: "Put",
                                    data: {
                                        producerID: producerID,
                                        name: items.name,
                                    },
                                    success: function (response) {
                                        var indexes = table.rows().eq(0).filter(function (rowIdx) {
                                            return table.cell(rowIdx, 0).data() === response.producerID;
                                        });

                                        var newData = table.row(indexes[0]).data();
                                        newData.name = items.name;
                                        table.row(indexes[0]).data(newData).draw();
                                    },
                                });
                            }
                        },
                    },
                    {
                        label: "Close",
                        className: "btn btn-default pull-left",
                        callback: function () {
                        }
                    },
                ],
                show: false,
                onEscape: function () {
                    dialogProducer.modal("hide");
                },
            });

            dialogProducer.modal("show");
        }

        function CreateNewCategoryDialogBootBox(title, table, mode, categoryID) {
            //to render a bootbox dialog modify a specific DataTable (redraw)
            var dialogCategory = bootbox.dialog({
                message: $("#dialogCategory").html(),
                title: title,
                buttons: [{
                    label: "Save",
                    className: "btn btn-primary pull-left dialogCategory-bootbox-ok-button",
                    callback: function () {
                        var form = dialogCategory.find("#formCategory");
                        var items = form.serializeJSON();
                        /*
                        //display data
                        console.log(items);
                        alert(JSON.stringify(items));
                        */
                        //--head my custom code
                        form.validate({
                            rules: {
                                name: {
                                    required: true,
                                    checkUniqueNameOfCategory: true,
                                    maxlength: 50,
                                },
                            },
                            messages: {
                                name: {
                                    required: "Name is required !!!",
                                }
                            },
                        });

                        if (form.valid() == false)
                            return false;

                        if (mode === "add") {
                            $.ajax({
                                url: "/api/Categories/Create",
                                method: "Post",
                                data: {
                                    name: items.name,
                                },
                                success: function (response) {
                                    var trDOM = table.row.add({
                                        categoryID: response.categoryID,
                                        name: response.name,
                                    }).draw(false).node();

                                    //add id attribute and remove it from an element(row)
                                    $(trDOM).attr("id", "added");
                                    $(trDOM).addClass("selected");
                                    var row = table.row("#added");
                                    row.scrollTo();

                                    //scroll the screen
                                    var $rowToScroll = $(trDOM);
                                    $('html, body').animate({ scrollTop: $rowToScroll.offset().top }, 2000);

                                    $(trDOM).removeAttr("id");
                                },
                            });
                        }
                        else if (mode === "modify") {
                            /*
                            var titleOfDialog = $("#dialogCategory").dialog("option", "title");
                            var categoryID = parseInt(titleOfDialog.substr(titleOfDialog.indexOf(':') + 1));
                            */
                            $.ajax({
                                url: "/api/Categories/Update",
                                method: "Put",
                                data: {
                                    categoryID: categoryID,
                                    name: items.name,
                                },
                                success: function (response) {
                                    var indexes = table.rows().eq(0).filter(function (rowIdx) {
                                        return table.cell(rowIdx, 0).data() === response.categoryID;
                                    });

                                    var newData = table.row(indexes[0]).data();
                                    newData.name = items.name;
                                    table.row(indexes[0]).data(newData).draw();
                                },
                            });
                        }

                        //--tail my custom code

                        dialogCategory.modal('hide');

                        return false;
                    }
                }, {
                    label: "Close",
                    className: "btn btn-default pull-left",
                    callback: function () {

                    }
                }],
                show: false,
                onEscape: function () {
                    dialogCategory.modal("hide");
                }
            });

            dialogCategory.modal("show");
        };

        function CreateNewSpecificationDialogBootBox(title, table, mode, specificationID) {
            //to render a bootbox dialog create new or modify exist specification within a specific DataTable

            var dialog = bootbox.dialog({
                message: $("#dialog-specification").html(),
                title: title,
                buttons: [
                    {
                        label: "Save",
                        className: "btn btn-primary pull-left",
                        callback: function () {
                            var form = dialog.find("#form-specification");
                            var items = form.serializeJSON();

                            form.validate({
                                rules: {
                                    name: {
                                        required: true,
                                        checkUniqueNameOfSpecification: true,
                                        maxlength: 50,
                                    },
                                },
                                messages: {
                                    name: {
                                        required: "Name is required !!!",
                                    }
                                },
                                submitHandler: function (form) {
                                    alert("Submitted abc!"); // --> for .submit() method
                                    return false;
                                }
                            });

                            //form.valid();
                            //form.submit();

                            if (form.valid() == false)
                                return false;

                            if (mode === "add") {
                                $.ajax({
                                    url: "/api/Specifications/Create",
                                    method: "Post",
                                    data: {
                                        name: items.name,
                                        description: items.description,
                                    },
                                    success: function (response) {
                                        var trDOM = table.row.add({
                                            specificationID: response.specificationID,
                                            name: response.name,
                                            description: response.description,
                                        }).draw(false).node();

                                        $(trDOM).addClass("selected");

                                        $(trDOM).attr("id", "added");
                                        var row = table.row("#added");
                                        row.scrollTo();

                                        //scroll the screen
                                        var $rowToScroll = $(trDOM);
                                        $('html, body').animate({ scrollTop: $rowToScroll.offset().top }, 2000);

                                        $(trDOM).removeAttr("id");
                                    },
                                });
                            }
                            else if (mode === "modify") {
                                $.ajax({
                                    url: "/api/Specifications/Update",
                                    method: "Put",
                                    data: {
                                        specificationID: specificationID,
                                        name: items.name,
                                        description: items.description,
                                    },
                                    success: function (response) {
                                        var indexes = table.rows().eq(0).filter(function (rowIdx) {
                                            return table.cell(rowIdx, 0).data() === response.specificationID;
                                        });

                                        var newData = table.row(indexes[0]).data();
                                        newData.name = items.name;
                                        newData.description = items.description;
                                        table.row(indexes[0]).data(newData).draw();
                                    },
                                });
                            }
                        },
                    },
                    {
                        label: "Close",
                        className: "btn btn-default pull-left",
                        callback: function () {
                        }
                    },
                ],
                show: false,
                onEscape: function () {
                    dialog.modal("hide");
                },
            });

            dialog.modal("show");
        }

        //------------------Add custom validation
        jQuery.validator.addMethod("checkUniqueNameOfSpecification", function (value, element) {
            //every time when the method .Valid() is called, this function would be called too.
            var isValid = true;
            $.ajax({
                url: "/api/Specifications/GetAll",
                method: "Get",
                async: false,
                success: function (response) {
                    for (var i = 0; i < response.length; i++) {
                        if (response[i].name == value) {
                            isValid = false;
                        }
                    }
                }
            });
            return isValid;
        }, "there're a name like this in our data, please try another name");

        jQuery.validator.addMethod("checkUniqueNameOfProducer", function (value) {
            var isValid = true;
            $.ajax({
                url: "/api/Producers/GetAll",
                method: "Get",
                async: false,
                success: function (response) {
                    for (var i = 0; i < response.length; i++) {
                        if (response[i].name == value) {
                            isValid = false;
                        }
                    }
                }
            });
            return isValid;
        }, "there're a name like this in our data, please try another name");

        jQuery.validator.addMethod("checkUniqueNameOfCategory", function (value) {
            var isValid = true;
            $.ajax({
                url: "/api/Categories/GetAll",
                method: "Get",
                async: false,
                success: function (response) {
                    for (var i = 0; i < response.length; i++) {
                        if (response[i].name == value) {
                            isValid = false;
                        }
                    }
                }
            });
            return isValid;
        }, "there're a name like this in our data, please try another name");
    </script>
</body>
</html>



