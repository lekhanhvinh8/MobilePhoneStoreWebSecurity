@model MobilePhoneStoreEcommerce.Core.ViewModels.CustomerViewModel
@using MobilePhoneStoreEcommerce.Persistence.Consts
@{
    Layout = null;
}
    <link rel="stylesheet" type="text/css" href="~/Content/bootstrap.css" />

<div class="container">
    <table id="table-orders" class="table table-bordered">
        <thead></thead>
        <tbody></tbody>
    </table>
</div>
<div id="dialog-order-detail" style="display:none; opacity:10">
    <form id="form-order-detail">
        <div class="form-inline">
            <label class="control-label" for="orderStatus">Order Status: </label>
            <input class="form-control" name="orderStatus" disabled />
        </div>
        <div class="form-group">
            <table class="table table-hover" name="table-products">
                <thead></thead>
                <tbody></tbody>
            </table>
        </div>
        <div class="form-inline">
            <label class="control-label" for="customerID">Customer ID: </label>
            <input class="form-control" name="customerID" style="margin-left:50px;" disabled />
        </div>
        <div class="form-inline">
            <label class="control-label" for="phoneNumber">Phone Number: </label>
            <input class="form-control" name="phoneNumber" style="margin-left:34px;" disabled />
        </div>
        <div class="form-inline">
            <label class="control-label" for="deliveryAddress">Delivery Address: </label>
            <input class="form-control" name="deliveryAddress" style="margin-left:20px;" disabled />
        </div>

        <div class="form-inline">
            <label class="control-label" for="sellerName">Seller Name: </label>
            <input class="form-control" name="sellerName" style="margin-left:53px;" disabled />
        </div>
        <div class="form-inline">
            <label class="control-label" for="deliveryDate">Delivery Date: </label>
            <input class="form-control" name="deliveryDate" style="margin-left:45px;" disabled />
        </div>
        <div class="form-inline">
            <label class="control-label" for="shippingCost">Shipping Cost: </label>
            <input class="form-control" name="shippingCost" style="margin-left:39px;" disabled />
        </div>
        <div class="form-inline" style="float: right;">
            <label class="control-label" for="totalCostLabel">Total Cost: </label>
            <div name="totalCost" style="float: right;"></div>
        </div>
    </form>
</div>

<script src="~/Scripts/jquery-3.4.1.js"></script>
<script src="~/Scripts/bootstrap.js"></script>
<script src="~/Scripts/bootbox.js"></script>
<script src="~/Scripts/DataTables/jquery.dataTables.js"></script>
<script src="~/Scripts/DataTables/dataTables.bootstrap.js"></script>

<script>
    $(document).ready(function () {

        var customerID = @Model.customerID;

        $.ajax({
            url: "/api/Orders/GetList?customerID=" + customerID,
            method: "Get",
            success: function (response) {
                $.ajax({
                    url: "/api/Orders/GetList?customerID=" + customerID + "&orderTime=" + response[0].orderTime,
                    method: "Get",
                    success: function (response) {
                    },
                })
            },

        });

            var table = $("#table-orders").DataTable({
                ajax: {
                    url: "/api/Orders/GetList?customerID=" + customerID,
                    dataSrc: "",
                },
                columns: [
                    {
                        title: "Order ID",
                        data: "orderID",
                        width: "10%",
                        render: function (data) {
                            return data;
                        },
                    },
                    {
                        title: "Order's Time",
                        data: "orderTime",
                        render: function (data) {
                            return data;
                        }
                    },
                    {
                        title: "Status",
                        data: "status",
                        render: function (data) {
                            if (data == @OrderStates.Pending)
                                return "<span>Pending</span>";
                            else if (data == @OrderStates.Confirmed)
                                return "<span>Waiting for delivery</span>";
                            else if (data == @OrderStates.Paid)
                                return "<span>Paid, waiting for delivery</span>";
                            else if (data == @OrderStates.Success)
                                return "<span>Success</span>";
                            else {
                                return "<span>the order was canceled</span>";
                            }
                        }
                    },
                    {
                        title: "Shipping Cost",
                        data: "shippingCost",
                        render: function (data) {
                            return "<span>" + standardizedMoneyFormatVND(data) + " VND</span>";
                        }
                    },
                    {
                        title: "Total Cost",
                        data: "totalOrderCost",
                        render: function (data, type, orderDto) {
                            return "<span>" + standardizedMoneyFormatVND(data + orderDto.shippingCost) + " VND</span>";
                        },
                    },
                    {
                        title: "See details",
                        data: "orderID",
                        render: function (data) {
                            return "<button class='btn-link jsDetail' data-orderID=" + data + ">Details</button>";
                        },
                    },
                    {
                        title: "Payment",
                        data: "orderID",
                        render: function (data, tupe, order) {
                            if (order.status == @OrderStates.Confirmed)
                                return "<button class='btn btn-success jsPayment' data-orderID=" + order.orderID + ">Payment</button>";

                        return "<button disabled class='btn btn-success' data-orderID=" + data + ">Payment</button>";
                    }
                },
                {
                    title: "Cancel order",
                    data: "orderID",
                    render: function (data, type, order) {
                        if (order.status == @OrderStates.Pending)
                            return "<button class='btn btn-danger jsCancel' data-orderID=" + order.orderID + ">Cancel</button>";

                            return "<button disabled class='btn btn-danger' data-orderID=" + data + ">Cancel</button>";
                        }
                    },
                    {
                        title: "Delete",
                        data: "orderID",
                        render: function (data, type, order) {
                            if (order.status == @OrderStates.Canceled)
                                return "<button class='btn btn-danger jsDelete' data-orderID=" + order.orderID + ">Delete</button>";

                            if (order.status == @OrderStates.Success)
                                return "<span>Success</span>";

                            if (order.status == @OrderStates.Confirmed)
                                return "<span>Confirmed</span>";

                        if (order.status == @OrderStates.Pending)
                            return "<span>Pending</span>";

                        return "<span>Paid</span>"
                    }
                }

            ],
            searching: false,
            info: false,
            ordering: false,
        });

        table.on("click", ".jsCancel", function () {
            var buttonCancel = $(this);

            $.ajax({
                url: "/api/Orders/CancelOrder?orderID=" + buttonCancel.attr("data-orderID"),
                method: "get",
                success: function () {
                    var indexes = table.rows().eq(0).filter(function (rowIdx) {
                        return table.cell(rowIdx, 0).data() == buttonCancel.attr("data-orderID");
                    });
                    var newData = table.row(indexes[0]).data();
                    newData.status = @OrderStates.Canceled;
                    table.row(indexes[0]).data(newData).draw();
                },
            });
        });

        table.on("click", ".jsPayment", function () {
            var buttonPayment = $(this);

            window.location.href = "/Paypal/Payment?orderID=" + buttonPayment.attr("data-orderID");
        })

        table.on("click", ".jsDelete", function () {
            var buttonDelete = $(this);

                $.ajax({
                    url: "/api/Orders/DeleteOrder?orderID=" + buttonDelete.attr("data-orderID"),
                    method: "get",
                    success: function () {
                        table.row(buttonDelete.parents("tr")).remove().draw();
                    },
                });
            })

            function standardizedMoneyFormatVND(money) {
                if ((typeof money) != "string")
                    money = money.toString();

                var standardMoney = "";
                var countTo3 = 1;

                for (var i = money.length - 1; i >= 0; i--) {
                    if (countTo3 < 4) {
                        standardMoney += money[i];
                    } else {
                        countTo3 = 1;
                        standardMoney += ".";
                        standardMoney += money[i];
                    }
                    countTo3 += 1;
                }
                return standardMoney.split("").reverse().join("");
        }
        table.on("click", ".jsDetail", function () {
            var button = $(this);
            CreateBootboxOrderDetail(button.attr("data-orderID"));

        });

        function CreateBootboxOrderDetail(orderID) {
                $.ajax({
                    url: "/api/Orders/Get?orderID=" + orderID,
                    method: "Get",
                    async: false,
                    success: function (orderDto) {
                        var dialogBootbox = bootbox.dialog({
                            message: $("#dialog-order-detail").html(),
                            title: "Order Detail",
                            //size: "large",
                            buttons: [
                                {
                                    label: "Cancel",
                                    className: "btn btn-danger",
                                    callback: function () {
                                    },
                                },
                            ],
                        });

                        var orderState = dialogBootbox.find("#form-order-detail input[name='orderStatus']");
                        if (orderDto.status == @OrderStates.Pending)
                            $(orderState).val("Pending");
                        else if (orderDto.status == @OrderStates.Canceled)
                            $(orderState).val("Canceled");
                        else if (orderDto.status == @OrderStates.Confirmed)
                            $(orderState).val("Confirm");
                        else if (orderDto.status == @OrderStates.Paid)
                            $(orderState).val("Paid");
                        else if (orderDto.status == @OrderStates.Success)
                            $(orderState).val("Success");

                        var tableProducts = dialogBootbox.find("#form-order-detail table[name='table-products']");

                        $(tableProducts).DataTable({
                            data: orderDto.productOfOrderDtos,
                            columns: [
                                {
                                    title: "Image",
                                    data: "productID",
                                    render: function (data) {
                                        var markup = "<img id='avatar-preview' class='img-thumbnail' style='width: 100px; height: 100px; object-fit: cover' src='/api/AvatarOfProducts/Get?productID=" + data + "'/>";

                                        return markup;
                                    }
                                },
                                {
                                    title: "Name",
                                    data: "productName",
                                    render: function (data, type, productsOfOrderDto) {
                                        var markup = "";
                                        markup += "<div>" + "<a href='/HomeScreen/Details?id=" + productsOfOrderDto.productID + "'>" + data + "</a>" + "</div>";
                                        return markup;
                                    }
                                },
                                {
                                    title: "Unit Price",
                                    data: "unitPrice",
                                    render: function (data) {
                                        return "<span>" + standardizedMoneyFormatVND(data) + " VND</span>";
                                    },
                                },
                                {
                                    title: "Quantity",
                                    data: "amount",
                                    render: function (data) {
                                        return "<span>x" + data + "</span>";
                                    },
                                },
                                {
                                    title: "Amount",
                                    data: "orderID",
                                    render: function (data, type, productsOfOrderDto) {
                                        return "<span>" + standardizedMoneyFormatVND(productsOfOrderDto.unitPrice * productsOfOrderDto.amount) + " VND</span>";
                                    },
                                },
                            ],
                            searching: false,
                            info: false,
                            ordering: false,
                            paging: false,
                        });

                        var customerID = dialogBootbox.find("#form-order-detail input[name='customerID']");
                        var phoneNumber = dialogBootbox.find("#form-order-detail input[name='phoneNumber']");
                        var deliveryAddress = dialogBootbox.find("#form-order-detail input[name='deliveryAddress']");
                        var sellerName = dialogBootbox.find("#form-order-detail input[name='sellerName']");
                        var deliveryDate = dialogBootbox.find("#form-order-detail input[name='deliveryDate']");
                        var shippingCost = dialogBootbox.find("#form-order-detail input[name='shippingCost']");

                        $(customerID).val(orderDto.customerID);
                        $(phoneNumber).val(orderDto.phoneNumber);
                        $(deliveryAddress).val(orderDto.deliveryAddress);
                        $(sellerName).val(orderDto.sellerName);
                        $(deliveryDate).val(orderDto.deliveryDate);
                        $(shippingCost).val(orderDto.shippingCost);

                        var totalCost = dialogBootbox.find("#form-order-detail div[name='totalCost']");
                        totalCost.text(" " + standardizedMoneyFormatVND(orderDto.shippingCost + orderDto.totalOrderCost) + " VND");
                    }
                });
            }
        });



</script>
