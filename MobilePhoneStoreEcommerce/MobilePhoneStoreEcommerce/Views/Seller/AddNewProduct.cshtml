@using MobilePhoneStoreEcommerce.Persistence.Consts
@model MobilePhoneStoreEcommerce.Core.ViewModels.ProductForSellerViewModel
@{
    Layout = null;
}
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>AddNewProduct</title>

    <link rel="stylesheet" type="text/css" href="~/Content/bootstrap.css" />
    <link href="~/Content/select2.min.css" rel='stylesheet' type='text/css'>
    <link rel="stylesheet" href="~/Content/Seller.css" type="text/css" />
</head>
<body>
    <header>
        <div class="navbar navbar-default">
            <div class="container">
                <div class="navbar-header">
                    @Html.ActionLink("Home", "Index", "HomeScreen", new { area = "" }, new { @class = "navbar-brand" })
                    @Html.ActionLink("Seller", "Index", "Seller", new { sellerID = Model.SellerID }, new { @class = "navbar-brand" })
                </div>
                <div class="navbar-collapse collapse">
                    <div class="nav navbar-nav navbar-right">
                        <img src="~/Content/resources/images/adminIcon.png" style="height: 50px;" />
                        <ul class="nav navbar-nav navbar-right">
                            <li>@Html.ActionLink("Log out", "Logout", "Account", routeValues: new { sessionName = SessionNames.SellerID }, htmlAttributes: new { id = "logoutLink" })</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>

    </header>

    <br />
    <div class="container">
        <form role="form" id="form-product">
            <div class="form-group">
                <label for="name" class="control-label">Name of product</label>
                <input type="text" class="form-control" name="name"/>
            </div>
            <div class="form-group">
                <label for="description" class="control-label">Description</label>
                <textarea class="form-control" rows="3" name="description"></textarea>
            </div>
            <div class="form-group">
                <label for="producer" class="control-label">Producer</label>
                <select id="select-producer" name="producer" style="width: 567px;">
                </select>
            </div>
            <div class="form-group">
                <label for="category" class="control-label">Category</label>
                <select id="select-category" name="category" style="width: 567px;">
                </select>
            </div>
            <div class="form-group">
                <label for="image" class="control-label">Image</label>
                <input id="select-image" type="file" accept=".jpg" name="image" />
            </div>
            <div class="form-group">
                <img id="avatar-preview" class="img-thumbnail" style="width: 200px; height: 200px; object-fit: cover" src="#" />
            </div>
            <div class="form-group">
                <label for="initialPrice" class="control-label">Initial Price</label>
                <input type="number" class="form-control" name="initialPrice" />
            </div>
            <div class="form-group">
                <label for="initialQuantity" class="control-label">Initial Quantity</label>
                <input type="number" class="form-control" name="initialQuantity" />
            </div>
            <div class="form-group">
                <label for="specifications" class="control-label">Specifications</label>
                <div>
                    <button type="button" id="btn-add-new-specification" class="btn btn-primary">Add specification</button>
                    <div id="dialog-add-specification" style="display:none;">
                        <div class="form-group">
                            <label for="specification">Specification name</label>
                            <select class="form-control" id="select-specification" name="specification" style="width: 567px;">
                            </select>
                        </div>
                    </div>
                </div>
                <table id="table-specifications" class="table table-hover table-striped table-bordered" name="specifications">
                    <thead>
                        <tr>
                            <td>Specification Name</td>
                            <td>Value</td>
                            <td>Delete</td>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>

            <footer>
                <div>
                    <button type="button" id="btn-cancel" class="btn btn-danger">Cancel</button>
                    <button type="button" id="btn-save-and-hide" class="btn btn-warning">Save and hide</button>
                    <button type="button" id="btn-save-and-show" class="btn btn-success">Save and show</button>
                </div>
            </footer>
        </form>
        <br />
    </div>

    <script src="~/Scripts/jquery-3.4.1.min.js"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script src="~/Scripts/bootbox.min.js"></script>
    <script src="https://ajax.aspnetcdn.com/ajax/jquery.validate/1.11.1/jquery.validate.min.js"></script>
    <script src="~/Scripts/select2.min.js" type='text/javascript'></script>

    <script>
        $(document).ready(function () {
            $.ajax({
                url: "/api/Producers/GetAll",
                method: "Get",
                async: false,
                success: function (response) {
                    for (var i = 0; i < response.length; i++) {
                        $('#select-producer').append($('<option>', {
                            value: response[i].producerID,
                            text: response[i].name,
                        }));
                    }
                    $("#select-producer").select2();
                },
            });

            $.ajax({
                url: "/api/Categories/GetAll",
                method: "Get",
                async: false,
                success: function (response) {
                    for (var i = 0; i < response.length; i++) {
                        $('#select-category').append($('<option>', {
                            value: response[i].categoryID,
                            text: response[i].name,
                        }));
                    }
                    $("#select-category").select2();
                },
            });

            $("#select-image").change(function () {
                var input = this;

                if (input.files && input.files[0]) {
                    var reader = new FileReader();

                    reader.onload = function (e) {
                        $('#avatar-preview').attr('src', e.target.result);
                    }

                    reader.readAsDataURL(input.files[0]); // convert to base64 string
                }
            });

            $("#table-specifications").on("click", ".js-delete", function () {
                var button = $(this);
                button.parents("tr").remove();
            });

            $("#btn-add-new-specification").on("click", function () {
                $('#select-specification').find("option").remove();

                $.ajax({
                    url: "/api/Specifications/GetAll",
                    method: "Get",
                    success: function (response) {
                        for (var i = 0; i < response.length; i++) {

                            var isIn = false;

                            $("#table-specifications tbody tr").each(function () {
                                if (response[i].specificationID.toString() == $(this).attr("data-specification-id")) {
                                    isIn = true;
                                }
                            });

                            if (isIn == false) {
                                $('#select-specification').append($('<option>', {
                                    value: response[i].specificationID,
                                    text: response[i].name,
                                }));
                            }
                        }

                        var dialog = bootbox.dialog({
                            message: $("#dialog-add-specification").html(),
                            title: "Add new specification",
                            buttons: [
                                {
                                    label: "Back",
                                    className: "btn btn-danger",
                                    callback: function () {
                                        dialog.modal("hide");
                                    },
                                },
                                {
                                    label: "Add",
                                    className: "btn btn-primary",
                                    callback: function () {
                                        var select = dialog.find("#select-specification");

                                        if (select.val() == null)
                                            return;

                                        $.ajax({
                                            url: "/api/Specifications/Get?id=" + select.val(),
                                            method: "Get",
                                            success: function (response) {

                                                var newLine = "<tr data-specification-id=" + select.val() + ">"
                                                    + "<td>" + response.name + "</td>"
                                                    + "<td><select class='form-control form-select'>";

                                                for (var i = 0; i < response.values.length; i++) {
                                                    newLine += "<option>" + response.values[i].value + "</option>";
                                                }

                                                newLine += "</select></td>";

                                                newLine += "<td><button type='button' class='btn-link js-delete'>Delete</button></td>";

                                                $("#table-specifications tbody").append(newLine);
                                            },
                                        });
                                    }
                                },
                            ],
                        });
                    },
                });
            });

            $("#btn-save-and-show").on("click", function () {
                AddNewProductFullInfo("true");
            });
            $("#btn-save-and-hide").on("click", function () {
                AddNewProductFullInfo("false");
            });
            $("#btn-cancel").on("click", function () {
                window.location.href = '/Seller/Index?sellerID=' + @Model.SellerID;
            });
            function AddNewProductFullInfo(status) {
                validateProductForm();

                if ($("#form-product").valid() == false)
                    return;

                var form = $("#form-product");
                var items = form.serializeJSON();

                var specificationValues = [];

                $("#table-specifications tbody tr").each(function () {
                    specificationValues.push({
                        specificationID: Number($(this).attr("data-specification-id")),
                        value: $(this).find(".form-select").val(),
                    });
                });

                var files = $("#select-image").get(0).files;

                var data = new FormData;

                data.append("imageFile", files[0]);
                data.append("name", items.name);
                data.append("description", items.description);
                data.append("producerID", items.producer);
                data.append("categoryID", items.category);
                data.append("price", items.initialPrice);
                data.append("quantity", items.initialQuantity);
                data.append("status", status);
                data.append("sellerID", @Model.SellerID);
                data.append("specificationValuesDtos", JSON.stringify(specificationValues));

                $.ajax({
                    url: "/api/ProductForSellers/Create",
                    method: "Post",
                    data: data,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        bootbox.dialog({
                                title: 'Successfully',
                                message: "<p>This product has been added sucessfully. What next</p>",
                                buttons: {
                                    backToHomeSeller: {
                                        label: "Back to management page",
                                        className: 'btn-danger',
                                        callback: function () {
                                            window.location.href = '/Seller/Index?sellerID=' + @Model.SellerID;
                                        }
                                    },
                                    update: {
                                        label: "Update this product",
                                        className: 'btn-success',
                                        callback: function () {
                                            var url = "@Url.Action("UpdateProduct", "Seller", new { productID = "{0}", sellerID = Model.SellerID })";

                                            url = url.replace("&amp;", "&");
                                            url = decodeURI(url);

                                            url = url.replace("{0}", response.productID);
                                            url = decodeURI(url);

                                            window.location.href = url;
                                        }
                                    },
                                },
                        });
                    },
                });

            }
        });

        jQuery.fn.serializeJSON = function () {
            var json = {};

            jQuery.map(jQuery(this).serializeArray(), function (n) {
                var _ = n.name.indexOf('[');

                if (_ > -1) {
                    var o = json,
                        _name;

                    _name = n.name.replace(/\]/gi, '').split('[');

                    for (var i = 0, len = _name.length; i < len; i++) {
                        if (i == len - 1) {
                            if (o[_name[i]]) {
                                if (typeof o[_name[i]] == 'string') {
                                    o[_name[i]] = [o[_name[i]]];
                                }

                                o[_name[i]].push(n.value);
                            } else {
                                o[_name[i]] = n.value || '';
                            }
                        } else {
                            o = o[_name[i]] = o[_name[i]] || {};
                        }
                    }
                } else if (json[n.name] !== undefined) {
                    if (!json[n.name].push) {
                        json[n.name] = [json[n.name]];
                    }

                    json[n.name].push(n.value || '');
                } else {
                    json[n.name] = n.value || '';
                }
            });

            return json;
        };

        function validateProductForm() {
            $("#form-product").validate({
                rules: {
                    name: {
                        required: true,
                        checkUniqueNameOfProduct: true,
                        maxlength: 50,
                    },
                    image: {
                        required: true,
                        checkAvatarOfProduct: true,
                    },
                    initialPrice: {
                        required: true,
                        min: 0,
                        checkIntegerNumber: true,
                    },
                    initialQuantity: {
                        required: true,
                        min: 0,
                        checkIntegerNumber: true,
                    }
                },
                messages: {
                    name: {
                        required: "Name is required !!!!",
                    },
                },
            });
        };

        jQuery.validator.addMethod("checkUniqueNameOfProduct", function (value) {
            var isValid = true;
            $.ajax({
                url: "/api/ProductForSellers/IsExist?productName=" + value,
                method: "Get",
                async: false,
                success: function (response) {
                    if (response == true)
                        isValid = false;
                }
            });
            return isValid;
        }, "there're a name like this in our data, please try another name");

        jQuery.validator.addMethod("checkAvatarOfProduct", function (value) {
            var isValid = true;
            if (value.split(".").slice(-1)[0] != "jpg")
                isValid = false;

            return isValid;
        }, "extension not valid, please select image of type jpg");

        jQuery.validator.addMethod("checkIntegerNumber", function (value) {
            var isValid = true;

            if (!Number.isInteger(Number(value)))
                isValid = false;

            return isValid;
        }, "invalid number, please type a integer number");

    </script>

</body>
</html>
